const message = `
前回出力した記事に、mermaid.jsを使用したダイアグラムを積極的に挿入し、記事に視覚的な補完を行い、更に完成度を高めてください。
また、引き続き以下の点は必ず考慮してください：
    - 記事の本文は必ず ==articleStart== タグで始め、==articleEnd== タグで終えてください。これらのタグの間に記事の主要な内容をすべて含めてください。
    - 記事全体が ==articleStart== と ==articleEnd== タグで正しく囲まれていることを再度確認してください。これらのタグの外には、タイトルや追加の注記以外の内容を含めないでください。
    - 文字数が12800字から16000字の間であることを必ず確認してください。この範囲に収まっていない場合は、セクションや取り扱う項目を増やすなどし、内容を増やすようにしてください。
    
ダイアグラムの作成と使用:
  - フローチャート（Flowchart）
  - シーケンス図（Sequence Diagram）
  - クラス図（Class Diagram）
  - 状態遷移図（State Diagram）
  - ER図（Entity Relationship Diagram）
  - ユーザージャーニー（User Journey）
  - ガントチャート（Gantt）
  - 円グラフ（Pie Chart）
  - 四分割図（Quadrant Chart）
  - 要求図（Requirement Diagram）
  - Gitグラフ（Gitgraph Diagram）
  - C4図（C4 Diagram）
  - マインドマップ（Mindmaps）
  - タイムライン（Timeline）
  - ZenUML
  - サンキー図（Sankey）
  - その他適切なダイアグラム

- 使用してはいけないダイアグラム:
  - XY散布図（XYChart）
  - ブロック図（Block Diagram）
  ※ これらのダイアグラムは、現在ベータバージョンであるため使用しないでください。

- ダイアグラムの作成時は以下の点に注意してください：
  - 完全で完璧なダイアグラムを目指し、わかりやすさを最優先してください。
  - 適切なラベル、説明、色分けを使用して情報を明確に伝えてください。
  - 複雑な概念を視覚的に表現し、読者の理解を促進するようにしてください。
  - ダイアグラムは記事の文脈に適切に組み込み、前後の説明と整合性を持たせてください。
  - ダイアグラムの作成には、mermaid.jsを使用してください。他のツールやソフトウェアは使用しないでください。
  - ダイアグラムの内容は情報が細かく沢山詰まっていることが読者の目を引くことになるので、その用に対応してください。

- ダイアグラムの挿入方法：
  - mermaid.jsのコードブロックを使用してください。例：
    \`\`\`mermaid
    [ここにmermaid.jsのコードを記述]
	\`\`\`
  - 各ダイアグラムの前後に、そのダイアグラムが何を表しているか、どのように解釈すべきかの説明を加えてください。

- ダイアグラムの使用に関する重要な注意事項：
  - ダイアグラムは記事の内容を補完し、視覚的に強化するために使用します。
  - 少なくとも1つのダイアグラムを必ず含めてください。これは必須条件です。
  - 複数のダイアグラムを使用することを強く推奨します。記事の長さと複雑さに応じて、2〜4個のダイアグラムを適切に配置することを検討してください。
  - ダイアグラムの数と記事の品質のバランスを取ってください。ダイアグラムの数よりも、各ダイアグラムの質と関連性を重視してください。

- ダイアグラムの配置：
  - 記事の構造に合わせて、関連する箇所にダイアグラムを配置してください。
  - 各セクションの主要な概念や流れを視覚化するのに適した場所を選んでください。
  - 最初のダイアグラムは、できるだけ記事の前半（例：はじめにの後や主要な概念の説明時）に配置することを検討してください。

- ダイアグラム使用の確認：
  - 記事の作成過程で、定期的にダイアグラムの使用状況を確認してください。
  - 記事の完成時に、少なくとも1つのダイアグラムが含まれていることを必ず確認してください。

7. ダイアグラムと文章のバランス:
- ダイアグラムは記事の内容を視覚的に強化するために使用し、文章での説明を置き換えるものではありません。
- 複雑な概念や関係性を説明する際は、文章による詳細な説明とダイアグラムによる視覚的表現を組み合わせて使用してください。
- 各ダイアグラムが記事全体の流れや構造にどのように貢献しているかを意識し、適切に配置してください。

8. 最終チェックリスト（必須確認事項）:

ダイアグラム（絶対条件/視覚的情報の中核）:
- [ ] 少なくとも2つ以上の詳細なmermaid.jsダイアグラムが戦略的に配置されていることを確認
- [ ] 各ダイアグラムが情報密度の高い、詳細な内容を含んでいることを確認（読者の目を引く複雑さと深さを持つこと）
- [ ] ダイアグラムが記事の重要概念を視覚的に表現し、テキストだけでは伝えきれない情報を提供していることを確認
- [ ] 各ダイアグラムの前後に、その内容を詳細に解説し、記事の本文と密接に関連付けた説明が付されていることを確認
- [ ] ダイアグラムが記事全体の流れを補強し、読者の理解を大幅に促進する配置になっていることを確認

注意: このチェックリストの全項目を満たすことが、高品質な技術記事作成の絶対条件です。一つでも欠けている項目があれば、記事の完成度は不十分と見なされます。

これらの指示に従い、ダイアグラムを効果的に活用して、より理解しやすく、情報量の多い技術記事を作成してください。`;

export function getAddDiagramPromptMessage() {
	return message;
}
